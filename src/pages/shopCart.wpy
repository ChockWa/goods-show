<template name="cart-goods-list">
  <view>
    <view class="goodsList">
      <repeat for="{{list}}" key="index" index="index" item="item">
        <view class="list_box">
          <swipeDelete :swipeData="item" @delItem.user="handleDelItem">
            <wux-wing-blank size="large">
              <view class="goods-info">
                <icon type="success" color="{{item.isChecked?'#1a1a1a':'rgb(153,153,153)'}}" @tap.stop="selectGoods" data-index="{{index}}" data-shopCartId="{{item.shopCartId}}" size="20" />
                <view class="img-box">
                  <navigator url="/pages/goodsDetail?goodsId={{item.goodsId}}">
                    <image src="{{item.cover}}" class="img" />
                  </navigator>
                </view>
                <view class="text-box">
                  <view class="goods-title">
                    {{item.name}}
                  </view>
                  <view class="sku-area">
                    <text wx:for="{{item.goodsSkuMap}}" wx:for-index="key" wx:for-item="value">{{key}}:{{value}} </text>
                  </view>
                  <view class="price-number">
                    <view class="goods-price">¥ {{item.price}}</view>
                    <view class="num-area">
                      <wux-input-number controlled value="{{item.quantity}}" data-index="{{index}}" min="1" max="9999" color="dark" bind:change="changeQuantity" />
                    </view>
                  </view>
                </view>
              </view>
            </wux-wing-blank>
          </swipeDelete>
        </view>
        <wux-white-space bodyStyle="background-color: #f3f3f1;margin-top:28rpx;margin-bottom:28rpx;" />
      </repeat>
    </view>
    <view class="empty_cart" wx:if="{{list.length==0}}">
      <image src="../images/empty_cart.png" class="empty_cart_img"></image>
      <view class="empty_cart_text">购物车还是空的</view>
      <view class="shop_btn">
        <view class="block btn_group">
          <view class="btn get_store" @tap="goIndex">去逛逛</view>
        </view>
      </view>
    </view>
    <view class="jiesuan-box" wx:if="{{list.length>0}}">
      <view class="left-price">
        <view @tap.stop="selectAll" class="all_select_box">
          <icon type="success" size="20" color="{{allChecked?'#1a1a1a':'rgb(153,153,153)'}}" />
          <view class="all_select">全选</view>
        </view>
        <view class="total" hidden="{{noSelect}}">合计：¥ {{totalPrice}}</view>
      </view>
      <view class="to-pay-btn {{noSelect?'no-select':''}}" hidden="{{!saveHidden}}" bindtap="toPayOrder">去下单</view>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy';
  import api from '@/api/api';
  import tip from '@/utils/tip';
  import swipeDelete from '@/components/common/wepy-swipe-delete';
  export default class shopCart extends wepy.page {
    config = {
      navigationBarBackgroundColor: "#31312b",
      navigationBarTextStyle: "white",
      navigationBarTitleText: '购物车',
      usingComponents: {
        'wux-input-number': './../lib/wux/input-number/index',
        'wux-wing-blank': './../lib/wux/wing-blank/index',
        'wux-white-space': './../lib/wux/white-space/index'
      }
    };
    components = {
      swipeDelete
    };
    data = {
      list: [],
      noSelect: false,
      saveHidden: true,
      totalPrice: 0,
      allChecked: false
    };
    onShow() {
      this.getCartList();
      // this.$invoke('shopCart', 'getCartListMethod');
    }
    //获取购物车商品列表
    async getCartList() {
      let resp = await api.shopCart.list();
      if (resp.code === 0) {
        this.list = resp.data.list;
        if (this.list) {
          this.caculatePriceAndAllChecked()
        }
      } else {
        tip.error(resp.msg);
      }
    }
    onLoad() {}
    computed = {};
    async deleteGoods(itemData) {
      var id = itemData.shopCartId;
      const resp = await api.shopCart.delete([shopCartId]);
      if (resp.code === 0) {
        this.list = resp.data.list;
        this.$apply();
      } else {
        tip.error(resp.msg, true);
      }
    }
    caculatePriceAndAllChecked() {
      let checkedList = this.list.filter(e => true === e.isChecked).concat()
      if (checkedList.length === this.list.length) {
        this.allChecked = true
      } else {
        this.allChecked = false
      }
      this.totalPrice = checkedList.reduce((total, currentValue, currentIndex, arr) => {
        return total + currentValue.price * currentValue.quantity
      }, 0)
      this.$apply()
    }
    methods = {
      handleDelItem(itemData) {
        this.deleteGoods(itemData);
      },
      async selectGoods(e) {
        var shopCartId = e.currentTarget.dataset.shopcartid;
        var index = parseInt(e.currentTarget.dataset.index);
        let resp = await api.shopCart.check({
          shopCartId: shopCartId,
          check: !this.list[index].isChecked
        })
        if (resp.code === 0) {
          this.list = resp.data.list
          this.caculatePriceAndAllChecked()
        } else {
          tip.error(resp.msg)
          return
        }
      },
      async changeQuantity(e) {
        let index = e.currentTarget.dataset.index
        let shopCartId = this.list[index].shopCartId
        console.log("quantity:" + e.detail.value)
        let resp = await api.shopCart.updateNum({
          shopCartId: shopCartId,
          quantity: e.detail.value
        })
        if (resp.code === 0) {
          this.list = resp.data.list
          this.caculatePriceAndAllChecked()
        }
      },
      async selectAll() {
        let resp = await api.shopCart.allCheck({
          check: !this.allChecked
        })
        if (resp.code === 0) {
          this.list = resp.data.list
          this.caculatePriceAndAllChecked()
        }
      },
      getCartListMethod() {
        this.getCartList();
      },
      async toPayOrder() {
        let checkedList = this.list.filter(e => true === e.isChecked).concat()
        if (checkedList.length < 1) {
          tip.alert("请选择商品")
          return
        }
        let shopCartIds = checkedList.map(e => {return e.shopCartId}).join(",")
        let resp = await api.order.genOrderToken({shopCartIds: shopCartIds})
        if(resp.code === 0){
          this.$navigate({url:"/pages/orderConfirm?token=" + resp.data.token})
        }else{
          tip.error("下单失败")
        }
      },
      goIndex() {
        wepy.switchTab({
          url: '/pages/home'
        });
      }
    };
    events = {};
  }
</script>
<style lang="less">
  .goodsList {
    margin-top: 18rpx;
  }
  .goods-info {
    margin-top: 10rpx;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: flex-start;
    background-color: #fff;
    icon {
      padding-top: 48rpx;
    }
    .img-box {
      width: 155rpx;
      overflow: hidden;
      margin-left: 32rpx;
    }
    .text-box {
      margin-left: 30rpx;
      .goods-title {
        font-size: 28rpx;
        color: #1a1a1a;
      }
      .sku-area {
        font-size: 24rpx;
        margin-top: 10rpx;
        color: #aaa;
      }
      .price-number {
        display: flex;
        margin-top: 12rpx;
        .goods-price {
          font-size: 30rpx;
          color: #e01f27;
          padding-top: 6rpx;
        }
        .num-area {
          margin-left: 120rpx;
        }
      }
    }
    .img-box .img {
      width: 160rpx;
      height: 160rpx;
    }
  }
  .jiesuan-box {
    display: flex;
    justify-content: space-between;
    width: 100%;
    height: 100rpx;
    position: fixed;
    bottom: 0;
    left: 0;
    border-bottom: 1px solid #eee;
    border-top: 1px solid #eee;
    background-color: #fff;
    z-index: 9999;
  }
  .jiesuan-box .to-pay-btn {
    width: 240rpx;
    text-align: center;
    line-height: 100rpx;
    background-color: #e01f27;
    font-size: 32rpx;
    color: #ffffff;
  }
  .jiesuan-box .to-pay-btn.no-select {
    background-color: #ccc;
  }
  .jiesuan-box .left-price {
    display: flex;
    width: 510rpx;
    justify-content: space-between;
    padding: 0 30rpx 0 20rpx;
    font-size: 28rpx;
    box-sizing: border-box;
    align-items: center;
  }
  .jiesuan-box .total {
    color: #e01f27;
    font-size: 30rpx;
  }
  .list_box {
    height: 155rpx;
  }
  .all_select_box {
    width: 200rpx;
    height: 100%;
    display: flex;
    align-items: center;
  }
  .all_select {
    flex: 1;
    padding-left: 10rpx;
  }
  .empty_cart {
    margin-top: 100rpx;
    .shop_btn {
      display: flex;
      width: 100%;
    }
    .block {
      margin: 0 auto;
      text-align: center;
      display: flex;
      align-items: center;
    }
    .btn_group {
      display: flex;
      align-items: center;
      padding-top: 100rpx;
      .btn {
        font-size: 30rpx;
        padding: 22rpx 55rpx;
        text-align: center;
        margin: 0 auto;
        width: 100%;
        -moz-border-radius: 10rpx;
        /* Firefox */
        -webkit-border-radius: 10rpx;
        /* Safari 和 Chrome */
        border-radius: 10rpx;
        /* Opera 10.5+, 以及使用了IE-CSS3的IE浏览器 */
      }
      .get_store {
        background: #e01f27;
        color: #fff;
        margin-left: 1rpx;
      }
    }
  }
  .empty_cart_img {
    width: 220rpx;
    height: 177rpx;
    display: block;
    margin: 0 auto;
  }
  .empty_cart_text {
    font-size: 32rpx;
    color: #999;
    margin-top: 20rpx;
    text-align: center;
  }
  .wux-input-number__selector {
    width: 50rpx !important;
    height: 46rpx !important;
    font-size: 30rpx !important;
    line-height: 46rpx !important;
  }
  .wux-input-number__input {
    padding: 0 !important;
    height: 46rpx !important;
    line-height: 46rpx !important;
  }
</style>